<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Fahim Salam Chowdhury</title>
        <link>https://fahim44.github.io/posts/</link>
        <description>Recent content in Posts on Fahim Salam Chowdhury</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 25 Dec 2020 17:13:49 +0600</lastBuildDate>
        <atom:link href="https://fahim44.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>mysql in docker</title>
            <link>https://fahim44.github.io/posts/2021/01/mysql-in-docker/</link>
            <pubDate>Thu, 14 Jan 2021 21:55:03 +0600</pubDate>
            
            <guid>https://fahim44.github.io/posts/2021/01/mysql-in-docker/</guid>
            <description>In this post, we will discuss how to setup &amp;amp; run mysql using docker
Goal We want to setup mysql using docker, but also want to provide our custom configurations for mysql and save mysql data into our machine. The reason of choosing docker over direct mysql installation into the machine is, we want to switch between mysql hosting machines with ease &amp;amp; start-stop mysql into our macine easily.
Prerequisite Docker &amp;amp; Docker-compose should already be setup into your machine beforehand.</description>
            <content type="html"><![CDATA[<p>In this post, we will discuss how to setup &amp; run <em>mysql</em> using <em>docker</em></p>
<h2 id="goal">Goal</h2>
<p>We want to setup <em>mysql</em> using <em>docker</em>, but also want to provide our custom configurations for mysql and save mysql data into our machine.
The reason of choosing docker over direct mysql installation into the machine is, we want to switch between mysql hosting machines with ease &amp; start-stop mysql into our macine easily.</p>
<h2 id="prerequisite">Prerequisite</h2>
<p><a href="https://www.docker.com/">Docker</a> &amp; <a href="https://docs.docker.com/compose/">Docker-compose</a> should already be setup into your machine beforehand.</p>
<h2 id="config--data-directory">config &amp; data directory</h2>
<p>First create two empty directories into your machine, anywhere you want with any name.
One for <em>mysql-config</em>, to store mysql configuration file.
Another for <em>mysql-data</em>, to persist database&rsquo;s data.</p>
<p>Into the <em>mysql-config</em> directory, create <code>config-file.cnf</code> file with following configurations</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#</span>
<span style="color:#75715e"># The MySQL database server configuration file.</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># One can use all long options that the program supports.</span>
<span style="color:#75715e"># Run program with --help to get a list of available options and with</span>
<span style="color:#75715e"># --print-defaults to see which it would actually understand and use.</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># For explanations see</span>
<span style="color:#75715e"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span>

<span style="color:#75715e"># Here is entries for some specific programs</span>
<span style="color:#75715e"># The following values assume you have at least 32M ram</span>

<span style="color:#f92672">[</span>mysqld<span style="color:#f92672">]</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># * Basic Settings</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e">#user		= mysql</span>
<span style="color:#75715e"># pid-file	= /var/run/mysqld/mysqld.pid</span>
<span style="color:#75715e"># socket	= /var/run/mysqld/mysqld.sock</span>
<span style="color:#75715e"># port		= 3306</span>
<span style="color:#75715e"># datadir	= /var/lib/mysql</span>


<span style="color:#75715e"># If MySQL is running as a replication slave, this should be</span>
<span style="color:#75715e"># changed. Ref https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmpdir</span>
<span style="color:#75715e"># tmpdir		= /tmp</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Instead of skip-networking the default is now to listen only on</span>
<span style="color:#75715e"># localhost which is more compatible and is not less secure.</span>
<span style="color:#75715e">#bind-address		= 127.0.0.1</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># * Fine Tuning</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e">#key_buffer_size		= 16M</span>
<span style="color:#75715e"># max_allowed_packet	= 64M</span>
<span style="color:#75715e"># thread_stack		= 256K</span>

<span style="color:#75715e"># thread_cache_size       = -1</span>

<span style="color:#75715e"># This replaces the startup script and checks MyISAM tables if needed</span>
<span style="color:#75715e"># the first time they are touched</span>
<span style="color:#75715e">#myisam-recover-options  = BACKUP</span>

<span style="color:#75715e"># max_connections        = 151</span>

<span style="color:#75715e"># table_open_cache       = 4000</span>

<span style="color:#75715e">#</span>
<span style="color:#75715e"># * Logging and Replication</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Both location gets rotated by the cronjob.</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Log all queries</span>
<span style="color:#75715e"># Be aware that this log type is a performance killer.</span>
<span style="color:#75715e"># general_log_file        = /var/log/mysql/query.log</span>
<span style="color:#75715e"># general_log             = 1</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Error log - should be very few entries.</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e">#log_error = /var/log/mysql/error.log</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Here you can see queries with especially long duration</span>
<span style="color:#75715e"># slow_query_log		= 1</span>
<span style="color:#75715e"># slow_query_log_file	= /var/log/mysql/mysql-slow.log</span>
<span style="color:#75715e"># long_query_time = 2</span>
<span style="color:#75715e"># log-queries-not-using-indexes</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># The following can be used as easy to replay backup logs or for replication.</span>
<span style="color:#75715e"># note: if you are setting up a replication slave, see README.Debian about</span>
<span style="color:#75715e">#       other settings you may need to change.</span>
<span style="color:#75715e"># server-id		= 1</span>
<span style="color:#75715e"># log_bin			= /var/log/mysql/mysql-bin.log</span>
<span style="color:#75715e"># binlog_expire_logs_seconds	= 2592000</span>
<span style="color:#75715e">#max_binlog_size   = 100M</span>
<span style="color:#75715e"># binlog_do_db		= include_database_name</span>
<span style="color:#75715e"># binlog_ignore_db	= include_database_name</span>
sql-mode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</code></pre></div><p>you can modify this file as farr your requirements.</p>
<h2 id="docker-compose-file">docker-compose file</h2>
<p>Now you have to create <em>docker-compose</em> file. For my case, this is <code>mysql_compose.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3.6&#39;</span>

<span style="color:#f92672">networks</span>:
  <span style="color:#f92672">my_app_net</span>:
    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my_app_net</span>
    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">bridge</span>

<span style="color:#f92672">services</span>:
  <span style="color:#f92672">my_mysql</span>:
    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">my_mysql</span>
    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">mysql:latest</span>
    <span style="color:#f92672">environment</span>:
      <span style="color:#f92672">MYSQL_DATABASE</span>: <span style="color:#ae81ff">%db_name%</span>
      <span style="color:#f92672">MYSQL_USER</span>: <span style="color:#ae81ff">%db_user%</span>
      <span style="color:#f92672">MYSQL_PASSWORD</span>: <span style="color:#ae81ff">%db_password%</span>
      <span style="color:#f92672">MYSQL_ROOT_PASSWORD</span>: <span style="color:#ae81ff">%db_root_password%</span>
    <span style="color:#f92672">ports</span>:
      - <span style="color:#ae81ff">3306</span>:<span style="color:#ae81ff">3306</span>
    <span style="color:#f92672">networks</span>:
      - <span style="color:#ae81ff">my_app_net</span>
    <span style="color:#f92672">volumes</span>:
      - <span style="color:#e6db74">&#34;%absoloute_path_of_mysql_data_directory%:/var/lib/mysql&#34;</span>
      - <span style="color:#e6db74">&#34;%absoloute_path_of_mysql_config_directory%:/etc/mysql/conf.d&#34;</span>
    <span style="color:#f92672">restart</span>: <span style="color:#66d9ef">on</span>-<span style="color:#ae81ff">failure</span>
    <span style="color:#f92672">cap_add</span>:
      - <span style="color:#ae81ff">SYS_NICE</span>
</code></pre></div><p>Don&rsquo;t forget to replace the db name, password, root-password, mysql-data &amp; mysql-config directory path in the compose file.</p>
<h2 id="start-stop-mysql-via-docker">start-stop mysql via docker</h2>
<p>Start docker program into your machine. Then, open your <em>terminal</em> &amp; <code>cd</code> into compose file location.</p>
<p>To start the service, execute:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker-compose -f mysql_compose.yaml up
</code></pre></div><p>It will read the compose file, setup the service &amp; start to log-out the mysql logs.</p>
<p>To stop the service, stop the service by pressing <code>cntrl</code> + <code>c</code>.
Then to remove the service from the stack, execute:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker-compose -f mysql_compose.yaml down
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Optional in Java</title>
            <link>https://fahim44.github.io/posts/2021/01/optional-in-java/</link>
            <pubDate>Fri, 01 Jan 2021 18:09:06 +0600</pubDate>
            
            <guid>https://fahim44.github.io/posts/2021/01/optional-in-java/</guid>
            <description>Java 8 has some cool features introduced on it&amp;rsquo;s release, for example, lamda, method reference etc. One of the major features is Optional. Today, we will discuss what optional is, why it is introduced &amp;amp; basic use case of it.
The Billion Dollar Mistake Tony Hoare, developer of quicksort algorithm, invented null reference in 1965. In 2009, he described it as a Billion Dollar Mistake &amp;amp; apologized for inventing it. Now what is Null Reference &amp;amp; why is it called The Billion Dollar Mistake?</description>
            <content type="html"><![CDATA[<p><strong>Java 8</strong> has some cool features introduced on it&rsquo;s release, for example, <em>lamda</em>, <em>method reference</em> etc.
One of the major features is <em>Optional</em>.
Today, we will discuss what optional is, why it is introduced &amp; basic use case of it.</p>
<h2 id="the-billion-dollar-mistake">The Billion Dollar Mistake</h2>
<p><a href="https://en.wikipedia.org/wiki/Tony_Hoare">Tony Hoare</a>, developer of <a href="https://en.wikipedia.org/wiki/Quicksort">quicksort algorithm</a>, invented <a href="https://en.wikipedia.org/wiki/Null_pointer">null reference</a> in 1965.
In 2009, he described it as a <a href="https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions">Billion Dollar Mistake</a> &amp; apologized for inventing it.
Now what is <strong>Null Reference</strong> &amp; why is it called <strong>The Billion Dollar Mistake</strong>?</p>
<p>According to wikipedia,</p>
<blockquote>
<p>In computing, a null pointer or null reference is a value saved for indicating that the pointer or reference does not refer to a valid object.</p>
</blockquote>
<p>If you are familier with <em>java</em> or any of its close cousins, you should read out the following example easily:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String name <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">());</span>
</code></pre></div><p>Can you guess what the output here will be?
Yes, you are right, it will throw the infamous <code>NullPointerException</code> here.
Because <code>name</code> is not initialized here &amp; we are calling <code>String.length()</code> on it without check! So, the null safe solution of this issue is,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String name <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
<span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>name <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
  System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Now why I have reffered NullPointerException as <strong>infamous exception</strong> you may ask.
Because it is very common senario.
If you have some experience with any mordern programming language (especially java), you probably encountered with it before.
It&rsquo;s so common, for some cases, you might write hundreds of null checking blocks, still may miss some cases.
Again, we programmers are forgetful in nature, we miss the null check all the time, we love to test our code with the happy case senario only &amp; ship it to production.
And in production, our piece of code faces-off against unwanted null reference and throws nullPointerException.</p>
<h2 id="null-safety--optional">Null Safety &amp; Optional</h2>
<p>Mordern languages, for example <strong>Kotlin</strong> provides <a href="https://kotlinlang.org/docs/reference/null-safety.html">Null Safety</a> (<strong>?</strong> operator), to solve the null-reference problem. For example, previous problem can be solved in kotlin like,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">var</span> name : String? = <span style="color:#66d9ef">null</span>
name<span style="color:#f92672">?.</span>let {
  print(<span style="color:#66d9ef">it</span>)
}
</code></pre></div><p>Null Safety in Kotlin using <a href="https://kotlinlang.org/docs/reference/null-safety.html#safe-calls">Safe Call Operator</a> (<code>?.</code>) is very easy to use &amp; understandable.</p>
<p>Sadly java still doesn&rsquo;t have any operator like the Kotlin&rsquo;s safe call operator.
Instead Java-8 introduced <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">Optional</a></strong> wrapper class.
Optional is a final class under the <em>java.util</em> package.
It is a generic class which actually wraps around the actual value &amp; provides the null reference safety &amp; some additional operations regarding the null safety. Let&rsquo;s solve the problem with java optional.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">ifPresent</span><span style="color:#f92672">(</span>name <span style="color:#f92672">-&gt;</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()));</span>
</code></pre></div><p>What The Heck!!! why are we using optional here for?
The vanilla java solution (the <em><code>if(name != null)</code></em> check solution) is more simple and easy to understand solution.
What is the benifit to use optional instead?</p>
<p>The reason is my friend to forcefully remind us the issue.
The <code>if (object != null)</code> checking solution is all perfect; no doubt about it.
But that solution is valid when we are not forgetful.
Suppose we have two blocks of code where the can-be-null object is used, but forget to check null in one of the blogs instead; then the null safety is garanteed again.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String name <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
<span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>name <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
  System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>
<span style="color:#f92672">....</span>
<span style="color:#f92672">....</span>
<span style="color:#f92672">....</span>
Integer k <span style="color:#f92672">=</span> name<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> 1<span style="color:#f92672">;</span>
</code></pre></div><p>But if we wrap the object with optional, we must check for null everytime we need to use the object.
It is very tedious I know, but better secured.</p>
<h2 id="optional-in-java">Optional in Java</h2>
<p>Now, we will see how we can create new optional &amp; some use-cases of it.</p>
<ul>
<li>
<h3 id="creating-optional">Creating Optional</h3>
<p>Optional provides some static method which can be used as it&rsquo;s builder methods.</p>
<ul>
<li>
<p>To create an empty optional, we can use <code>Optional.empty()</code> static method. Empty optional means that the <em>wrapped object</em> has no valid value.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
</code></pre></div></li>
<li>
<p>If any object has value for sure, we can wrap the object with optional using <code>Optional.of(...)</code> static method. It takes the object as param. When using <code>of</code> static method, we must be sure that object can&rsquo;t be null, if it becomes null for any case, <code>of</code> method will throw <code>NullPointerException</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p>If any object has value or is null, we can wrap the object with optional using <code>Optional.ofNullable(...)</code> static method. It takes the object-in-question as param.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> invalidNameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span><span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> validNameOptional   <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
</ul>
</li>
<li>
<h3 id="checking-optionals-value">Checking Optional&rsquo;s value</h3>
<ul>
<li>If any Optional object has value present in it, <code>Optional.isPresent()</code> method will return <code>true</code>, otherwise <code>false</code>.
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">isPresent</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
  System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;This message should be printed.&#34;</span><span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
<li>As revert of <em>isPresent</em> method, <code>Optional.isEmpty()</code> method will return <code>true</code> when optional object has no value in it, otherwise <code>false</code>.
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
  System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;name is empty. This message should be printed.&#34;</span><span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
</ul>
</li>
<li>
<h3 id="unwrapping-optionals-value">Unwrapping Optional&rsquo;s value</h3>
<p>If any <code>Optional</code> is not empty, we can unwrap the Optional&rsquo;s Object using <code>Optional.get()</code> method.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
String name <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<h3 id="conditional-blocks">Conditional blocks</h3>
<ul>
<li>
<p>If we execute some logic whenever an Optional is not empty, we can use <code>Optional.ifPresent(...)</code> method, which takes a <code>Consumer</code> as param, which is invoked only when Optional has value.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">ifPresent</span><span style="color:#f92672">(</span>name <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
  System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">);</span>
<span style="color:#f92672">});</span>
</code></pre></div></li>
<li>
<p>When Optional is empty, we want to unwrap the Optional and pass an object as default value, we can use <code>Optional.orElse(...)</code>. This method takes an object which is the default value that we want to pass if the optional is empty.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
String name <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">orElse</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p><code>Optional.orElseGet(...)</code> is similar to <code>orElse(...)</code> method; the main difference is <code>orElse()</code> takes an object which will be returned if the the Optional is empty, and <code>orElseGet()</code> takes a <code>Supplier</code> interface as param, which will only be invoked when the Optional is empty.</p>
<p>As <code>orElse</code> method directly returns the object provided to it, the default object should always be initiated before-hand when we use this.
On the other hand, the default object only be created when Optional is empty when using <code>orElseGet</code>.
That&rsquo;s why, when we deal with some <em>IO</em> operation / heavy Object (expensive object to be initiated) as default value, it is better to use <code>orElseGet</code> instead of <code>orElse</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
String name <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">orElseGet</span><span style="color:#f92672">(()</span> <span style="color:#f92672">-&gt;</span> <span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p><code>Optional.orElseThrow(...)</code> is similar to <code>orElseGet</code>, the difference is instead of returning default value when Optional is empty, <code>orElseThrow</code> will throw an exception. It takes a supplier as param which, provides the exception to be thrown.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
String name <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">orElseThrow</span><span style="color:#f92672">(</span>CustomException<span style="color:#f92672">::</span><span style="color:#66d9ef">new</span><span style="color:#f92672">);</span>
</code></pre></div><p><strong>java 10</strong> also has a no-arg <code>orElseThrow</code> method, which throws <code>NoSuchElelementException</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
String name <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">orElseThrow</span><span style="color:#f92672">();</span>
</code></pre></div></li>
<li>
<p>From <strong>Java 9</strong>, there is a new method called <code>Optional.or(...)</code>, which is similar to <code>orElseGet</code> as functionality but default in return type.
Where, <code>orElse</code> and <code>orElseGet</code> unwrapped the optional object, <code>or</code> method doesn&rsquo;t unwrap &amp; return the <code>Optional&lt;Type&gt;</code>, so that we can perform further Optional related actions on it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> anotherOptional <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">or</span><span style="color:#f92672">(()</span> <span style="color:#f92672">-&gt;</span> <span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>anotherOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(),</span> <span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<blockquote>
<p>If Optional not empty, do this&hellip; else, do that</p>
</blockquote>
<p>This is a common scenerio of Optional. To cover this flow into lamda, <strong>Java 9</strong> introduced <code>ifPresentOrElse(...)</code> method. It takes <em>Consumer</em> which is invoked when optional in not empty, and <em>Runnable</em> as second param which&rsquo;s <code>run</code> method is invoked when the optional is empty.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">ifPresentOrElse</span><span style="color:#f92672">(</span>name <span style="color:#f92672">-&gt;</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">),</span>
                               <span style="color:#f92672">()</span> <span style="color:#f92672">-&gt;</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;No name found!!!&#34;</span><span style="color:#f92672">));</span>
</code></pre></div></li>
</ul>
</li>
<li>
<h3 id="filtering--mapping">Filtering &amp; Mapping</h3>
<ul>
<li>
<p>To test and filter out value, we can use <code>Optional.filter(...)</code> method.
It takes <code>Predicate</code> as param and return Optional.
If Optional is not empty, the pedicate&rsquo;s test method is invoked.
If test method return true, filter method will return the <code>Optional&lt;value&gt;</code>, otherwise return <code>Optional.empty()</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">filter</span><span style="color:#f92672">(</span>name <span style="color:#f92672">-&gt;</span> name<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;John&#34;</span><span style="color:#f92672">));</span>
Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">isPresent</span><span style="color:#f92672">(),</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p>For non-empty Optional, <code>Optional.map(...)</code> method transform the value to another value.
It takes <code>Function</code> as param.
<code>Function</code>&rsquo;s <code>apply</code> method takes the optional&rsquo;s value and returned new object of the expected type.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
Optional<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> lengthOptional <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>String<span style="color:#f92672">::</span>length<span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p><code>Optional.flatMap(...)</code> is same as <code>Optional.map(...)</code>.
The difference is <em>map</em>&rsquo;s <em>Function.apply</em> method takes unwrapped value; where <em>flatMap</em> takes Optional wrapped value, unwrap it first, then transfrom it.</p>
<p>Suppose we have the following,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Hero</span> <span style="color:#f92672">{</span>
      
  <span style="color:#66d9ef">private</span> String name<span style="color:#f92672">;</span>

  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Hero</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">public</span> Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getName</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span>name<span style="color:#f92672">);</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Here, want A hero&rsquo;s name&rsquo;s <em>length</em> as optional.
If we use <code>map</code> method here:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>Hero<span style="color:#f92672">&gt;</span> heroOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Hero<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">));</span>
Optional<span style="color:#f92672">&lt;</span>Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;&gt;</span> nameOptionalWrapper <span style="color:#f92672">=</span> heroOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>Hero<span style="color:#f92672">::</span>getName<span style="color:#f92672">);</span>
Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> nameOptionalWrapper<span style="color:#f92672">.</span><span style="color:#a6e22e">orElse</span><span style="color:#f92672">(</span>Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">());</span>
Optional<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> nameLengthOptional <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>String<span style="color:#f92672">::</span>length<span style="color:#f92672">);</span>
</code></pre></div><p>In this case, if we use <code>flatMap</code> instead:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>Hero<span style="color:#f92672">&gt;</span> heroOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Hero<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">));</span>
Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> heroOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">flatMap</span><span style="color:#f92672">(</span>Hero<span style="color:#f92672">::</span>getName<span style="color:#f92672">);</span>
Optional<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> nameLengthOptional <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>String<span style="color:#f92672">::</span>length<span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p><strong>Java 9</strong> introduced <code>Optional.stream()</code> method.
It treats optional instance as a <code>Stream</code>.
So we can use various <code>Stream API</code> functionality for optional, such as <em>collect</em>, <em>map</em>, <em>filter</em>, <em>flatMap</em> etc.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameList <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>Collectors<span style="color:#f92672">.</span><span style="color:#a6e22e">toList</span><span style="color:#f92672">());</span>
</code></pre></div></li>
</ul>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Optional is one of the powerful tools of Java&rsquo;s arsenal.
We can construct complex logic by chaining various optionals functionalities together as it empathizes Stream API flow.
But, we need to be careful with using optional.
Using optional in unnecessary places can create some boiler-plate code.
Again optional is not meant to used as method param, because <em>Optional Wrapper</em> can be null just like any other java object.
So stick it in your mind,</p>
<p><strong>Use Optional as method return type, Never use Optional as method&rsquo;s param type.</strong></p>
]]></content>
        </item>
        
    </channel>
</rss>
