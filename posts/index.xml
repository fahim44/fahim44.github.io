<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Fahim Salam Chowdhury</title>
        <link>https://fahim44.github.io/posts/</link>
        <description>Recent content in Posts on Fahim Salam Chowdhury</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 25 Dec 2020 17:13:49 +0600</lastBuildDate>
        <atom:link href="https://fahim44.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Theorem of C.A.P</title>
            <link>https://fahim44.github.io/posts/2021/06/theorem-of-c.a.p/</link>
            <pubDate>Fri, 25 Jun 2021 22:10:08 +0600</pubDate>
            
            <guid>https://fahim44.github.io/posts/2021/06/theorem-of-c.a.p/</guid>
            <description>The CAP (consistency, availability, partition tolerance) theorem is also known as Brewer’s Theorem which is named after computer scientist Professor Eric A. Brewer . It is a theorem regarding Distributed Database System first advanced by Professor Brewer during a talk on distributed system in 2000.
Before jumping to the actual theorem, start first check out some key words.
Distributed system In basic terms, A distributed system is a network of multiple nodes which work as a single node.</description>
            <content type="html"><![CDATA[<p>The <strong>CAP</strong> (<em>consistency</em>, <em>availability</em>, <em>partition tolerance</em>) theorem is also known as <em>Brewer’s Theorem</em> which is named after
<a href="https://en.wikipedia.org/wiki/Eric_Brewer_%28scientist%29" target="_blank">
    computer scientist Professor Eric A. Brewer
</a>.
It is a theorem regarding <strong>Distributed Database System</strong> first advanced by Professor Brewer during a talk on distributed system in 2000.<br>
Before jumping to the actual theorem, start first check out some key words.</p>
<h2 id="distributed-system">Distributed system</h2>
<p>In basic terms, A distributed system is a <em>network</em> of multiple nodes which work as a single node.
Here node is physical or virtual machines.<br>
<em>Microservice</em> architecture is a good example of distributed system.
Here separate machines &amp; applications works together which seems like a single entity to end-user.
This applications can be horizontally scalable accross multiple machines.
They have independent states &amp; operate conurrently. They communicate with each other using various messeging protocols.
They can also fail independently without taking down the whole network it.</p>
<p><em>Distributed database system</em> stores data on more than one database node at the same time.
When we work with billions of data with &ldquo;<em>available everywhere</em>&rdquo; mentality, we need to consider the distributed system.<br>
Basically, all clouds applications are distributed system.</p>
<h2 id="consistency">Consistency</h2>
<p>Consistency means, end-users retrieve same data at a same time, no matter witch node they are connect to.
To achieve this fully, when data is written to any node, it must be replicated to others nodes right away &amp; they retrieval of the data should be unavailable until all nodes write the data.<br>
Please note that, <em><strong>This consistency &amp; Consistency property of ACID don&rsquo;t provide same meaning.</strong></em></p>
<h2 id="availability">Availability</h2>
<p>Availability means, when an end-user requested any data, he will receive response; even if one or more nodes are down.
All active nodes should return valid response.</p>
<h2 id="partition-tolerance">Partition tolerance</h2>
<p>Any distributed system&rsquo;s backbone is communication process.
Partition tolerance means, whole sytem should keep working dispite any number of communication breakdowns happend.</p>

    <img src="/img/cap.webp"  alt="cap"  class="center"  style="border-radius: 8px;"  />


<h2 id="cap-theorem">CAP theorem</h2>
<p>In CAP theorem, Brewer states that; for a <em>distributed data store</em>, it is impossible to simultaneously provide more two out of three (<em>Consistency</em>, <em>Availability</em>, <em>Partition tolerance</em>) guarantees.<br>
For example, a distributed database can fully support consistency, availability; but will fail to gurantee full partition tolerance gurantee.</p>
<p>A database which gurantee consistency and availability is called <strong>CA database</strong>.
For example, mongoDB, redis</p>
<p>A database which gurantee consistency and partition tolerance is called <strong>CP database</strong>.
For example, mysql.</p>
<p>A database which gurantee availability and partition tolerance is called <strong>AP database</strong>.
For example, cassandra, couchDB.
Cassandra called itself eventually consistent, because it can be configured to become CA instead of AP and vice-versa.</p>
<p>Please note that, these databases have all three features, but can only fully support maxium any two of them.</p>
]]></content>
        </item>
        
        <item>
            <title>A.C.I.D.ity in database</title>
            <link>https://fahim44.github.io/posts/2021/05/a.c.i.d.ity-in-database/</link>
            <pubDate>Sun, 02 May 2021 00:04:34 +0600</pubDate>
            
            <guid>https://fahim44.github.io/posts/2021/05/a.c.i.d.ity-in-database/</guid>
            <description>Atomicity, Consistency, Isolation, Durability (aka: ACID) are the properties of database transactions. These properties describe the data validity of any condition.
Transaction Database Transaction means single or multiple related database operations executing sequencially which is counted as a single database unit; which guarantees data durability, consistency. For example, on any e-commerance website, if you place an order, an row is created against your account in order table, the available item count decrease for the ordered item from the item.</description>
            <content type="html"><![CDATA[<p><strong>A</strong>tomicity, <strong>C</strong>onsistency, <strong>I</strong>solation, <strong>D</strong>urability (aka: <strong>ACID</strong>) are the properties of <a href="#transaction"><em>database transactions</em></a>.
These properties describe the data validity of any condition.</p>
<h2 id="transaction">Transaction</h2>
<p>Database Transaction means single or multiple related database operations executing sequencially which is counted as a single database unit; which guarantees data durability, consistency.
For example, on any e-commerance website, if you place an order, an row is created against your account in order table, the available item count decrease for the ordered item from the item.
These two operations can be wrap around with transaction.
The operations will be completed sequentially (in this example, first order will be created, then item count will be decreased).
The transaction is completed when all operations completed successfully.
If any operation for example <em>decrease item count</em> failed, all operations should be rolledback, meaning <em>create order</em> also be canceled.</p>
<h2 id="acid">ACID</h2>
<p><em>ACID</em> are the properties what make <a href="#transaction">transaction</a> successful.
Let&rsquo;s discuss them one-by-one.</p>

    <img src="/img/lemon_slice.webp"  alt="acid"  class="center"  style="border-radius: 8px;"  />


<h3 id="atomicity">Atomicity</h3>
<p>In one sentence, Atomicity means <em>all or nothing</em>.
It describes, a transaction succeeds if and only if it&rsquo;s all database statements are successfully executed.
If any of the statements failed, the remaining statements will not be execute &amp; the already executed update statements (CREATE, UPDATE, DELETE operations) will be rolled-back &amp; re-state previous state.
There is no <em>partial failure</em> in transaction.
For this property, a transaction is treated as <em>single unit</em>.</p>
<h3 id="consistency">Consistency</h3>
<p>Consistency means data can only move from <em>one valid state to another valid state</em>.
For example, there are customer &amp; order tables in a relational database.
Customer &amp; Order have one-to-many relationship between them.
Meanning, a customer can have one-or-many orders, &amp; every order has a <code>customer_id</code> field which is linked with specific customer&rsquo;s <code>id</code>.
Now, if we delete a customer, then this customer&rsquo;s order rows' <code>customer_id</code> will reference to wrong customer <code>id</code>.
So, the data will become inconsistence.
As here customer cannot move to <em>delete state</em> without clearing it&rsquo;s dependencies.
So we have to delete all orders of this customer; or update the customer_id references to another valid customer before deleting the customer.</p>
<p>If any transaction&rsquo;s execution violates database&rsquo;s consistency rule, the whole transaction will be rolled-back.</p>
<h3 id="isolation">Isolation</h3>
<p>In database, transactions are executed in isolated space.
Isolation ensures that concurrently executed transactions leave the database in the same state as if they were executed sequentially.
Now if multiple concurrently running transactions try to mutate same data at same time, one transaction will continue while another transaction must wait until the first transaction completes.</p>
<h3 id="durability">Durability</h3>
<p>Durability means once a transaction is commited, the changes will be saved no matter what happened.
The future transactions can update the changes, but until then the database will always return the last updated value.
This behavior should not changed even in a situation of system failure.
To achieve this commited trasactions should be saved into <em>non-volatile memory</em>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Although <em>ACID</em> is vital requirement for databases, not all databases are succeed to achieve this.
That because, to achieve ACID compliance a databse most likely need to sacrifice other important requirements, like, speed, easy scalability etc.
To support main their focus, some databases don&rsquo;t give much focus on some ACID features.
Normally, relational databases (mysql, oracle etc) are ACID compliant.
On the other hand, most of the NoSQL databases (mongoDB, redis etc) lack some ACID features because they mainly focus on high speed &amp; high availability.</p>
]]></content>
        </item>
        
        <item>
            <title>Http request methods</title>
            <link>https://fahim44.github.io/posts/2021/03/http-request-methods/</link>
            <pubDate>Fri, 26 Mar 2021 22:56:59 +0600</pubDate>
            
            <guid>https://fahim44.github.io/posts/2021/03/http-request-methods/</guid>
            <description>To indicate what action should be taken on a Resource, HTTP provides some pre-defined Request Methods. Because of reffering actions, thses methods are sometimes reffered as HTTP verbs.
Features of HTTP Methods Although they are semantically difference, HTTP Methods share some common features/quality among them.
Safe An Http method is called safe, if it doesn&amp;rsquo;t change any server state. Meaning, if the Http method&amp;rsquo;s main operation is read-only, then the method is safe.</description>
            <content type="html"><![CDATA[<p>To indicate what action should be taken on a <em>Resource</em>, <em>HTTP</em> provides some pre-defined <strong>Request Methods</strong>.
Because of reffering actions, thses methods are sometimes reffered as <em>HTTP verbs</em>.</p>

    <img src="/img/sign_up_today.webp"  alt="Request Header"  class="center"  style="border-radius: 8px;"  />


<h2 id="features-of-http-methods">Features of HTTP Methods</h2>
<p>Although they are semantically difference, HTTP Methods share some common features/quality among them.</p>
<h3 id="safe">Safe</h3>
<p>An Http method is called <em>safe</em>, if it doesn&rsquo;t change any server state.
Meaning, if the Http method&rsquo;s main operation is <em>read-only</em>, then the method is <em>safe</em>.
For example, <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code> are some safe http methods.</p>
<p>A <em>safe</em> method <strong>should not change</strong> any server state.
It&rsquo;s only purpose is retrieve ready-only data.
Although server itself can change its status when calling safe method, for example server can log the calling of the method.
The main reason of safe methods not to change the server status is; these methods are &ldquo;<em>open</em>&rdquo;, meaning anybody can see what information they are passing to manupulate the server.
And again, web crawlers rely on calling safe methods.</p>
<p>So, in-sort, making an order via calling <code>GET</code> methood = BAD IDEA.</p>
<p>One last note&hellip; <strong>All safe methods are idempotent, but not all idempotent methods are safe.</strong>
For example, <code>PUT</code> and <code>DELETE</code> are both idempotent but unsafe.</p>
<h3 id="idempotent">Idempotent</h3>
<p>A Http method is called <em>idempotent</em>, when identical multiple reuquests with same effect leave the server into same state.
Meaning if you make same request multiple time, server will always be change to same state.</p>
<p>For example, <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code> keep the server state intact. So that they are idempotent.
Again, <code>PUT</code> &amp; <code>DELETE</code> with same parameter only change the server state for the first time request, following requests don&rsquo;t change anything. So they are also idempotent.
But, when requesting <code>POST</code> with same parameter multiple times, server might create new entities for every request. That&rsquo;s why <code>POST</code> is not idempotent.</p>
<p>In sort, idempotent methods have no side effect. Servers can save analytic data for each request, but as they don&rsquo;t change the server&rsquo;s actual state anyway, we can ignore them.</p>
<p>Last but not least, this feature actually depends on deveoper.
Suppose, you develop an api <code>DELETE /user/{id}</code>, then we can say it is idempotent, because for first successful delete it will return <code>2xx</code> response, the later requests will always return <code>4xx</code> status, because the requests will not affect the server state anymore.
But if we develop an api <code>DELETE /user/lastEntry</code>, then it is not idempotent.
Because every request to this api, will delete last current row every time, thus changing the server state every time.</p>
<h3 id="cacheable">Cacheable</h3>
<p>Client for example browser can cache some http responses.
Not all http responses can be cached.
There are some constrains which should be passed to be able to cache http responses.</p>
<ol>
<li>
<p>Http method should be cacheable.
<code>GET</code> &amp; <code>HEAD</code> methods are eligible for caching.
<code>POST</code> &amp; <code>PATCH</code> methods can be cached if the <code>Content-Location</code> header is set, although most of the clients don&rsquo;t implement it.
<code>PUT</code> and <code>DELETE</code> methods are not cacheable.</p>
</li>
<li>
<p>Fix response status codes make the response cache considerables.
These status codes are <code>200</code>, <code>203</code>, <code>204</code>, <code>206</code>, <code>300</code>, <code>301</code>, <code>404</code>, <code>405</code>, <code>410</code>, <code>414</code>, and <code>501</code>.</p>
</li>
<li>
<p>Some specific headers like <code>Cache-Control</code> can prevent caching.</p>
</li>
</ol>
<p>Note that some non-cacheable requests/responses to a specific URI may invalidate previously cached responses on the same URI.</p>
<h2 id="http-methods">HTTP Methods</h2>
<p>There are 9 types of Http methods.
Of them, 4 are most known (<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>) &amp; 2 are mostly used (<code>GET</code>, <code>POST</code>) methods.</p>
<h3 id="get">GET</h3>
<p>The <code>GET</code> methods requests to <strong>read</strong> any specified resource.
GET should only be used to retrieve data.
Data is passed to the caller as the response body.
GET is <a href="#safe">safe</a>, <a href="#idempotent">idempotent</a>, <a href="#cacheable">cacheable</a>.
GET is also allowed in the <em>HTML forms</em>.</p>
<p>Althouth there is no prohibition from the specification, Some existing implementation may not support sending body/payload in the GET request.
So, it is better not to send payload in the GET request.</p>
<h3 id="post">POST</h3>
<p>Using <code>POST</code> method, we can pass <em>entity</em> of a specific resource to server, which can change some state of the server.
Mainly <code>POST</code> is used to <strong>create</strong> a new entity.
The <code>Content-Type</code> request header indicates the request body type in POST http method.</p>
<p><code>POST</code> has request body &amp; successful response body.
It is not <a href="#safe">safe</a> &amp; <a href="#idempotent">idempotent</a>.
It can be <a href="#cacheable">cacheable</a> only if freshness information is included.
It is allowed in the <em>HTML forms</em>.</p>
<p>Other than <a href="#get">GET</a>, <code>POST</code> is one of the most popular Http method.
For example, <strong>GraphQL</strong> uses <code>POST</code> to pass data between client &amp; server.</p>
<h3 id="put">PUT</h3>
<p><code>PUT</code> is used to <strong>create new if not already present, else update the existing</strong> a specific resource.
<code>PUT</code> is used to update the <em>whole entity</em>.
The main difference between it &amp; <a href="#post">post</a> is, <code>PUT</code> is <a href="#idempotent">idempotent</a>, but POST is not.</p>
<p><code>PUT</code> has request body but no successful response body.
It is not <a href="#safe">safe</a> &amp; <a href="#cacheable">cacheable</a>, &amp; not allowed in the <em>HTML forms</em>.</p>
<h3 id="delete">DELETE</h3>
<p>Http method <code>DELETE</code> is used to <strong>delete/remove</strong> a specific resource.</p>
<p><code>DELETE</code> may have request body and successful response body.
It is <a href="#idempotent">idempotent</a>, but not <a href="#safe">safe</a> &amp; <a href="#cacheable">cacheable</a>.
<code>DELETE</code> is not allowed in the <em>HTML forms</em>.</p>
<h3 id="patch">PATCH</h3>
<p><code>PATCH</code> is used to <em>partially modify</em> a specific resource.
It is used to update any entities one/more fields.
The main differece between <a href="#put">PUT</a> &amp; <code>PATCH</code> is that, in <code>PATCH</code> one or more fields of any entity get updated, BUT in <code>PUT</code> the whole entity gets replaced.</p>
<p><code>PATCH</code> has request body &amp; successful response body.
It is not <a href="#safe">safe</a>, <a href="#idempotent">idempotent</a> &amp; <a href="#cacheable">cacheable</a>.
It is not allowed in the <em>HTML forms</em>.</p>
<h3 id="head">HEAD</h3>
<p>Same as <a href="#get"><code>GET</code></a>, <code>HEAD</code> http method requests to <strong>read</strong> specific resource.
The differece between these two is <code>GET</code> is interested in actual data, where <code>HEAD</code> is interested on <em>status of the data</em>.
Again, HEAD is faster than GET request.</p>
<p>HEAD method requests for <a href="#http-headers">HTTP HEADERS</a>.
HEAD method doesn&rsquo;t support data passing via request/response body.
HEAD is <a href="#safe">safe</a>, <a href="#idempotent">idempotent</a>, <a href="#cacheable">cacheable</a>.
HEAD is not allowed in the <em>HTML forms</em>.</p>
<p>For example, an url makes a request for large download.
Instead of actually downloading the data, HEAD request could read its <code>Content-Length</code> header to check the filesize without actually downloading the file.</p>
<p>Another example is hashing.
Suppose a browser is caching data.
Before making any GET request to a particular url to retrieve the actual data everytime, we can make HEAD request to check the hash code if the data is changed or not.
If not changed, we can show the data from the cache.
Or if changed, we can make the GET request to retrieve the actual data.</p>
<ul>
<li>
<h4 id="http-headers">HTTP HEADERS</h4>
</li>
</ul>
<p><code>HEADERS</code> let the client &amp; server pass additional informatiion with an HTTP request or response.
A header passes data in <em>key-value</em> pair syntax, having <code>:</code> between them as separator.
A header dosen&rsquo;t hold actual data, but information of the data.
There are various types of headers, for example, <em>General headers</em>, <em>Request headers</em>, <em>Response headers</em>, <em>Entity headers</em>.</p>
<h3 id="connect">CONNECT</h3>
<p>Http method <code>CONNECT</code> is used open a <em>tunnel</em> between client and server identified by the target resource.
It starts a <em>two-way communication</em> between client &amp; server.
<code>CONNECT</code> method can be used to access websites that use <em>SSL</em> or <em>HTTPS</em>.</p>
<p>For example, the client asks the <em>HTTP proxy server</em> to tunnel <em>TCP connection</em> to desired destination using CONNECT method.
The proxy server makes the connection on behalf of the client.
When connection is established, the proxy server continues to proxy the TCP stream to and from the client.</p>
<p>Some proxy servers might need authority to create a tunnel using <a href="#proxy-authorization">Proxy-Authorization</a> request header.</p>
<p><code>CONNECT</code> has no request body, but has successful response body.
It is not <a href="#safe">safe</a>, <a href="#idempotent">idempotent</a>, <a href="#cacheable">cacheable</a>.
<code>CONNECT</code> is not allowed in the <em>HTML forms</em>.</p>
<ul>
<li>
<h4 id="proxy-authorization">Proxy-Authorization</h4>
</li>
</ul>
<p><code>Http Proxy-Authorization request header</code> contains the credential to authenticate a client to proxy server. It is required to pass with the request if server responded before with <code>407</code> <code>Proxy Authentication Required</code> status code with <code>Proxy-Authonticate</code> response header.</p>
<p><code>Proxy-Authorization</code> syntax is:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">Proxy-Authorization: &lt;<span style="color:#f92672">type</span>&gt; &lt;<span style="color:#f92672">credentials</span>&gt;
</code></pre></div><p>Here, <code>&lt;type&gt;</code> will be replaced with <code>Authentication type</code>.
The most common type is <code>Basic</code>.</p>
<p>the <code>&lt;credentials&gt;</code> will be replaced with client&rsquo;s credential.
The credential is generated by following steps:</p>
<ul>
<li>The username and the password are combined with a colon (<code>:</code>) (example: <code>username:password</code>)</li>
<li>Encode the resulting string into <strong>Base64</strong>.</li>
</ul>
<h3 id="options">OPTIONS</h3>
<p>Http method <code>OPTIONS</code> provides response of what communcation options are permitted for targeted resource.
<code>OPTIONS</code> can be used to identify what <strong>other Http methods</strong> are allowed for the specific resource.
It is also used as <a href="#preflighted-requests-in-cors">preflightd request</a> by mordern browser to support <strong>CORS</strong>.
Client can specify a url or use <code>*</code> for whole server to get list of allowed options with <code>OPTIONS</code> method.</p>
<p>Popular server (for example: Tomcat) normally configure <code>OPTIONS</code> methods for whole server &amp; specific urls autometically.</p>
<p><code>OPTIONS</code>  has no request body, but has successful response body.
It is <a href="#safe">safe</a> &amp; <a href="#idempotent">idempotent</a>, but not <a href="#cacheable">cacheable</a>.
<code>OPTIONS</code> is not allowed in the <em>HTML forms</em>.</p>
<ul>
<li>
<h4 id="preflighted-requests-in-cors">Preflighted requests in CORS</h4>
</li>
</ul>
<p>In mordern browsers, when from inside of any domain (for example, <code>a.com</code>), we try to call another domain&rsquo;s (<code>b.com</code>) any resource (<code>GET b.com/users</code> using <em>ajax</em> call), browsers don&rsquo;t call the method right-away.
Instead it calls <code>OPTIONS b.com/users</code> first, to check if <code>a.com</code> is eligible to call <code>GET b.com</code>.
If <code>b.com</code> grants <code>a.com</code> to call the <code>GET b.com/users</code>, then browser will make the request.
This pre-check request is called <strong>Preflighted request</strong> and it is designed support <strong>CORS</strong> safety.</p>
<p>Browser check some specific response header of the OPTIONS response to check CORS.
These headers are:</p>
<ul>
<li><code>Access-Control-Allow-Origin</code> what <em>domains</em> other than itself is allowed to retrieve this specific resource.
Using <code>*</code> can open for all domains. Using <code>*</code> is not recomended due to security reason.</li>
<li><code>Access-Control-Allow-Methods</code> what <em>http methods</em> are allowed to be called.
It is same as <code>Allowed</code> header, but it is used for CORS.</li>
<li><code>Access-Control-Allow-Headers</code> what <em>response headers</em> are allowed to be read.</li>
<li><code>Access-Control-Max-Age</code> what is the max time these allowed permissions can be cached.</li>
</ul>
<p>For example, browser makes the following Preflighted request:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">OPTIONS /users HTTP/1.1
Host: b.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Connection: keep-alive
Origin: https://a.com
Access-Control-Request-Method: GET
Access-Control-Request-Headers: X-PINGOTHER, Content-Type
</code></pre></div><p>and the response is the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">HTTP/1.1 204 No Content
Date: Mon, 01 Jan 2021 01:15:39 GMT
Server: Apache/2.0.61 (Unix)
Access-Control-Allow-Origin: https://a.com
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: X-PINGOTHER, Content-Type
Access-Control-Max-Age: 86400
Vary: Accept-Encoding, Origin
Keep-Alive: timeout=2, max=100
Connection: Keep-Alive
</code></pre></div><h3 id="trace">TRACE</h3>
<p>Http method <code>TRACE</code> is used perform message loop-back test.
It is mainly used for debugging purpose.
The <em>loop-back test</em> means the caller will receive back what it has send to the server in request as response with some additional info.
If successful, the response code will be <code>200</code> with the <em>content-type</em> of <code>message/http</code>.
The final recipient is either the <strong>origin server</strong> or the first server to receive a <em>Max-Forwards</em> value of <code>0</code> in the request.</p>
<p>For this method, <em>request</em> &amp; <em>response</em> have no body.
<code>TRACE</code> is <a href="#safe">safe</a> &amp; <a href="#idempotent">idempotent</a>, but not <a href="#cacheable">cacheable</a>.
<code>TRACE</code> is not allowed in the <em>HTML forms</em>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Although Http provides these all kind of methods to be used for all type of tasks, it is up to us developers to use them in our projects.
We can use <code>GET</code> request to <strong>delete</strong> entity from our database, no one will stop us.
But we have to understand, by doing so, our data becomes more vulnerable.</p>
<p>Again, our web browsers use these various methods like <code>OPTIONS</code> all the time to ensure security.</p>
<p>Whatever we use all these methods or not, it is always good to know these methods.</p>
]]></content>
        </item>
        
        <item>
            <title>mysql in docker</title>
            <link>https://fahim44.github.io/posts/2021/01/mysql-in-docker/</link>
            <pubDate>Thu, 14 Jan 2021 21:55:03 +0600</pubDate>
            
            <guid>https://fahim44.github.io/posts/2021/01/mysql-in-docker/</guid>
            <description>In this post, we will discuss how to setup &amp;amp; run mysql using docker
Goal We want to setup mysql using docker, but also want to provide our custom configurations for mysql and save mysql data into our machine. The reason of choosing docker over direct mysql installation into the machine is, we want to switch between mysql hosting machines with ease &amp;amp; start-stop mysql into our macine easily.
Prerequisite Docker &amp;amp; Docker-compose should already be setup into your machine beforehand.</description>
            <content type="html"><![CDATA[<p>In this post, we will discuss how to setup &amp; run <em>mysql</em> using <em>docker</em></p>

    <img src="/img/whale.webp"  alt="Whale"  class="center"  style="border-radius: 8px;"  />


<h2 id="goal">Goal</h2>
<p>We want to setup <em>mysql</em> using <em>docker</em>, but also want to provide our custom configurations for mysql and save mysql data into our machine.
The reason of choosing docker over direct mysql installation into the machine is, we want to switch between mysql hosting machines with ease &amp; start-stop mysql into our macine easily.</p>
<h2 id="prerequisite">Prerequisite</h2>
<p><a href="https://www.docker.com/">Docker</a> &amp; <a href="https://docs.docker.com/compose/">Docker-compose</a> should already be setup into your machine beforehand.</p>
<h2 id="config--data-directory">Config &amp; data directory</h2>
<p>First create two empty directories into your machine, anywhere you want with any name.
One for <em>mysql-config</em>, to store mysql configuration file.
Another for <em>mysql-data</em>, to persist database&rsquo;s data.</p>
<p>Into the <em>mysql-config</em> directory, create <code>config-file.cnf</code> file with following configurations</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#</span>
<span style="color:#75715e"># The MySQL database server configuration file.</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># One can use all long options that the program supports.</span>
<span style="color:#75715e"># Run program with --help to get a list of available options and with</span>
<span style="color:#75715e"># --print-defaults to see which it would actually understand and use.</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># For explanations see</span>
<span style="color:#75715e"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span>

<span style="color:#75715e"># Here is entries for some specific programs</span>
<span style="color:#75715e"># The following values assume you have at least 32M ram</span>

<span style="color:#f92672">[</span>mysqld<span style="color:#f92672">]</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># * Basic Settings</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e">#user		= mysql</span>
<span style="color:#75715e"># pid-file	= /var/run/mysqld/mysqld.pid</span>
<span style="color:#75715e"># socket	= /var/run/mysqld/mysqld.sock</span>
<span style="color:#75715e"># port		= 3306</span>
<span style="color:#75715e"># datadir	= /var/lib/mysql</span>


<span style="color:#75715e"># If MySQL is running as a replication slave, this should be</span>
<span style="color:#75715e"># changed. Ref https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmpdir</span>
<span style="color:#75715e"># tmpdir		= /tmp</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Instead of skip-networking the default is now to listen only on</span>
<span style="color:#75715e"># localhost which is more compatible and is not less secure.</span>
<span style="color:#75715e">#bind-address		= 127.0.0.1</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># * Fine Tuning</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e">#key_buffer_size		= 16M</span>
<span style="color:#75715e"># max_allowed_packet	= 64M</span>
<span style="color:#75715e"># thread_stack		= 256K</span>

<span style="color:#75715e"># thread_cache_size       = -1</span>

<span style="color:#75715e"># This replaces the startup script and checks MyISAM tables if needed</span>
<span style="color:#75715e"># the first time they are touched</span>
<span style="color:#75715e">#myisam-recover-options  = BACKUP</span>

<span style="color:#75715e"># max_connections        = 151</span>

<span style="color:#75715e"># table_open_cache       = 4000</span>

<span style="color:#75715e">#</span>
<span style="color:#75715e"># * Logging and Replication</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Both location gets rotated by the cronjob.</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Log all queries</span>
<span style="color:#75715e"># Be aware that this log type is a performance killer.</span>
<span style="color:#75715e"># general_log_file        = /var/log/mysql/query.log</span>
<span style="color:#75715e"># general_log             = 1</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Error log - should be very few entries.</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e">#log_error = /var/log/mysql/error.log</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Here you can see queries with especially long duration</span>
<span style="color:#75715e"># slow_query_log		= 1</span>
<span style="color:#75715e"># slow_query_log_file	= /var/log/mysql/mysql-slow.log</span>
<span style="color:#75715e"># long_query_time = 2</span>
<span style="color:#75715e"># log-queries-not-using-indexes</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># The following can be used as easy to replay backup logs or for replication.</span>
<span style="color:#75715e"># note: if you are setting up a replication slave, see README.Debian about</span>
<span style="color:#75715e">#       other settings you may need to change.</span>
<span style="color:#75715e"># server-id		= 1</span>
<span style="color:#75715e"># log_bin			= /var/log/mysql/mysql-bin.log</span>
<span style="color:#75715e"># binlog_expire_logs_seconds	= 2592000</span>
<span style="color:#75715e">#max_binlog_size   = 100M</span>
<span style="color:#75715e"># binlog_do_db		= include_database_name</span>
<span style="color:#75715e"># binlog_ignore_db	= include_database_name</span>
sql-mode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</code></pre></div><p>you can modify this file as farr your requirements.</p>
<h2 id="docker-compose-file">docker-compose file</h2>
<p>Now you have to create <em>docker-compose</em> file. For my case, this is <code>mysql_compose.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3.6&#39;</span>

<span style="color:#f92672">networks</span>:
  <span style="color:#f92672">my_app_net</span>:
    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my_app_net</span>
    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">bridge</span>

<span style="color:#f92672">services</span>:
  <span style="color:#f92672">my_mysql</span>:
    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">%container_name%</span>
    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">mysql:latest</span>
    <span style="color:#f92672">environment</span>:
      <span style="color:#f92672">MYSQL_DATABASE</span>: <span style="color:#ae81ff">%db_name%</span>
      <span style="color:#f92672">MYSQL_USER</span>: <span style="color:#ae81ff">%db_user%</span>
      <span style="color:#f92672">MYSQL_PASSWORD</span>: <span style="color:#ae81ff">%db_password%</span>
      <span style="color:#f92672">MYSQL_ROOT_PASSWORD</span>: <span style="color:#ae81ff">%db_root_password%</span>
    <span style="color:#f92672">ports</span>:
      - <span style="color:#ae81ff">3306</span>:<span style="color:#ae81ff">3306</span>
    <span style="color:#f92672">networks</span>:
      - <span style="color:#ae81ff">my_app_net</span>
    <span style="color:#f92672">volumes</span>:
      - <span style="color:#e6db74">&#34;%absoloute_path_of_mysql_data_directory%:/var/lib/mysql&#34;</span>
      - <span style="color:#e6db74">&#34;%absoloute_path_of_mysql_config_directory%:/etc/mysql/conf.d&#34;</span>
    <span style="color:#f92672">restart</span>: <span style="color:#66d9ef">on</span>-<span style="color:#ae81ff">failure</span>
    <span style="color:#f92672">cap_add</span>:
      - <span style="color:#ae81ff">SYS_NICE</span>
</code></pre></div><p>Don&rsquo;t forget to replace the db name, password, root-password, mysql-data &amp; mysql-config directory path in the compose file.</p>
<h2 id="start-stop-mysql-via-docker">Start-stop mysql via docker</h2>
<p>Start docker program into your machine. Then, open your <em>terminal</em> &amp; <code>cd</code> into compose file location.</p>
<p>To start the service, execute:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker-compose -f mysql_compose.yaml up
</code></pre></div><p>It will read the compose file, setup the service &amp; start to log-out the mysql logs.</p>
<p>To stop the service, stop the service by pressing <code>cntrl</code> + <code>c</code>.
Then to remove the service from the stack, execute:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker-compose -f mysql_compose.yaml down
</code></pre></div><h2 id="access-mysql-cli">Access mysql cli</h2>
<p>To access the started mysql&rsquo;s cli, you can execute the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker exec -it %container_name% mysql --user root --password<span style="color:#f92672">=</span>%db_root_password%
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Optional in Java</title>
            <link>https://fahim44.github.io/posts/2021/01/optional-in-java/</link>
            <pubDate>Fri, 01 Jan 2021 18:09:06 +0600</pubDate>
            
            <guid>https://fahim44.github.io/posts/2021/01/optional-in-java/</guid>
            <description>Java 8 has some cool features introduced on it&amp;rsquo;s release, for example, lamda, method reference etc. One of the major features is Optional. Today, we will discuss what optional is, why it is introduced &amp;amp; basic use case of it.
The Billion Dollar Mistake Tony Hoare, developer of quicksort algorithm, invented null reference in 1965. In 2009, he described it as a Billion Dollar Mistake &amp;amp; apologized for inventing it. Now what is Null Reference &amp;amp; why is it called The Billion Dollar Mistake?</description>
            <content type="html"><![CDATA[<p><strong>Java 8</strong> has some cool features introduced on it&rsquo;s release, for example, <em>lamda</em>, <em>method reference</em> etc.
One of the major features is <em>Optional</em>.
Today, we will discuss what optional is, why it is introduced &amp; basic use case of it.</p>
<h2 id="the-billion-dollar-mistake">The Billion Dollar Mistake</h2>
<p><a href="https://en.wikipedia.org/wiki/Tony_Hoare">Tony Hoare</a>, developer of <a href="https://en.wikipedia.org/wiki/Quicksort">quicksort algorithm</a>, invented <a href="https://en.wikipedia.org/wiki/Null_pointer">null reference</a> in 1965.
In 2009, he described it as a <a href="https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions">Billion Dollar Mistake</a> &amp; apologized for inventing it.
Now what is <strong>Null Reference</strong> &amp; why is it called <strong>The Billion Dollar Mistake</strong>?</p>
<p>According to wikipedia,</p>
<blockquote>
<p>In computing, a null pointer or null reference is a value saved for indicating that the pointer or reference does not refer to a valid object.</p>
</blockquote>
<p>If you are familier with <em>java</em> or any of its close cousins, you should read out the following example easily:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String name <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">());</span>
</code></pre></div><p>Can you guess what the output here will be?
Yes, you are right, it will throw the infamous <code>NullPointerException</code> here.
Because <code>name</code> is not initialized here &amp; we are calling <code>String.length()</code> on it without check! So, the null safe solution of this issue is,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String name <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
<span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>name <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
  System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Now why I have reffered NullPointerException as <strong>infamous exception</strong> you may ask.
Because it is very common senario.
If you have some experience with any mordern programming language (especially java), you probably encountered with it before.
It&rsquo;s so common, for some cases, you might write hundreds of null checking blocks, still may miss some cases.
Again, we programmers are forgetful in nature, we miss the null check all the time, we love to test our code with the happy case senario only &amp; ship it to production.
And in production, our piece of code faces-off against unwanted null reference and throws nullPointerException.</p>
<h2 id="null-safety--optional">Null Safety &amp; Optional</h2>
<p>Mordern languages, for example <strong>Kotlin</strong> provides <a href="https://kotlinlang.org/docs/reference/null-safety.html">Null Safety</a> (<strong>?</strong> operator), to solve the null-reference problem. For example, previous problem can be solved in kotlin like,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">var</span> name : String? = <span style="color:#66d9ef">null</span>
name<span style="color:#f92672">?.</span>let {
  print(<span style="color:#66d9ef">it</span>)
}
</code></pre></div><p>Null Safety in Kotlin using <a href="https://kotlinlang.org/docs/reference/null-safety.html#safe-calls">Safe Call Operator</a> (<code>?.</code>) is very easy to use &amp; understandable.</p>
<p>Sadly java still doesn&rsquo;t have any operator like the Kotlin&rsquo;s safe call operator.
Instead Java-8 introduced <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">Optional</a></strong> wrapper class.
Optional is a final class under the <em>java.util</em> package.
It is a generic class which actually wraps around the actual value &amp; provides the null reference safety &amp; some additional operations regarding the null safety. Let&rsquo;s solve the problem with java optional.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">ifPresent</span><span style="color:#f92672">(</span>name <span style="color:#f92672">-&gt;</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()));</span>
</code></pre></div><p>What The Heck!!! why are we using optional here for?
The vanilla java solution (the <em><code>if(name != null)</code></em> check solution) is more simple and easy to understand solution.
What is the benifit to use optional instead?</p>
<p>The reason is my friend to forcefully remind us the issue.
The <code>if (object != null)</code> checking solution is all perfect; no doubt about it.
But that solution is valid when we are not forgetful.
Suppose we have two blocks of code where the can-be-null object is used, but forget to check null in one of the blogs instead; then the null safety is garanteed again.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String name <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
<span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>name <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
  System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>
<span style="color:#f92672">....</span>
<span style="color:#f92672">....</span>
<span style="color:#f92672">....</span>
Integer k <span style="color:#f92672">=</span> name<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> 1<span style="color:#f92672">;</span>
</code></pre></div><p>But if we wrap the object with optional, we must check for null everytime we need to use the object.
It is very tedious I know, but better secured.</p>
<h2 id="optional-in-java">Optional in Java</h2>
<p>Now, we will see how we can create new optional &amp; some use-cases of it.</p>
<ul>
<li>
<h3 id="creating-optional">Creating Optional</h3>
<p>Optional provides some static method which can be used as it&rsquo;s builder methods.</p>
<ul>
<li>
<p>To create an empty optional, we can use <code>Optional.empty()</code> static method. Empty optional means that the <em>wrapped object</em> has no valid value.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
</code></pre></div></li>
<li>
<p>If any object has value for sure, we can wrap the object with optional using <code>Optional.of(...)</code> static method. It takes the object as param. When using <code>of</code> static method, we must be sure that object can&rsquo;t be null, if it becomes null for any case, <code>of</code> method will throw <code>NullPointerException</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p>If any object has value or is null, we can wrap the object with optional using <code>Optional.ofNullable(...)</code> static method. It takes the object-in-question as param.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> invalidNameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span><span style="color:#66d9ef">null</span><span style="color:#f92672">);</span>
Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> validNameOptional   <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
</ul>
</li>
<li>
<h3 id="checking-optionals-value">Checking Optional&rsquo;s value</h3>
<ul>
<li>If any Optional object has value present in it, <code>Optional.isPresent()</code> method will return <code>true</code>, otherwise <code>false</code>.
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">isPresent</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
  System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;This message should be printed.&#34;</span><span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
<li>As revert of <em>isPresent</em> method, <code>Optional.isEmpty()</code> method will return <code>true</code> when optional object has no value in it, otherwise <code>false</code>.
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
  System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;name is empty. This message should be printed.&#34;</span><span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div></li>
</ul>
</li>
<li>
<h3 id="unwrapping-optionals-value">Unwrapping Optional&rsquo;s value</h3>
<p>If any <code>Optional</code> is not empty, we can unwrap the Optional&rsquo;s Object using <code>Optional.get()</code> method.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
String name <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<h3 id="conditional-blocks">Conditional blocks</h3>
<ul>
<li>
<p>If we execute some logic whenever an Optional is not empty, we can use <code>Optional.ifPresent(...)</code> method, which takes a <code>Consumer</code> as param, which is invoked only when Optional has value.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">ifPresent</span><span style="color:#f92672">(</span>name <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
  System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">);</span>
<span style="color:#f92672">});</span>
</code></pre></div></li>
<li>
<p>When Optional is empty, we want to unwrap the Optional and pass an object as default value, we can use <code>Optional.orElse(...)</code>. This method takes an object which is the default value that we want to pass if the optional is empty.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
String name <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">orElse</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p><code>Optional.orElseGet(...)</code> is similar to <code>orElse(...)</code> method; the main difference is <code>orElse()</code> takes an object which will be returned if the the Optional is empty, and <code>orElseGet()</code> takes a <code>Supplier</code> interface as param, which will only be invoked when the Optional is empty.</p>
<p>As <code>orElse</code> method directly returns the object provided to it, the default object should always be initiated before-hand when we use this.
On the other hand, the default object only be created when Optional is empty when using <code>orElseGet</code>.
That&rsquo;s why, when we deal with some <em>IO</em> operation / heavy Object (expensive object to be initiated) as default value, it is better to use <code>orElseGet</code> instead of <code>orElse</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
String name <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">orElseGet</span><span style="color:#f92672">(()</span> <span style="color:#f92672">-&gt;</span> <span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p><code>Optional.orElseThrow(...)</code> is similar to <code>orElseGet</code>, the difference is instead of returning default value when Optional is empty, <code>orElseThrow</code> will throw an exception. It takes a supplier as param which, provides the exception to be thrown.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
String name <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">orElseThrow</span><span style="color:#f92672">(</span>CustomException<span style="color:#f92672">::</span><span style="color:#66d9ef">new</span><span style="color:#f92672">);</span>
</code></pre></div><p><strong>java 10</strong> also has a no-arg <code>orElseThrow</code> method, which throws <code>NoSuchElelementException</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
String name <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">orElseThrow</span><span style="color:#f92672">();</span>
</code></pre></div></li>
<li>
<p>From <strong>Java 9</strong>, there is a new method called <code>Optional.or(...)</code>, which is similar to <code>orElseGet</code> as functionality but default in return type.
Where, <code>orElse</code> and <code>orElseGet</code> unwrapped the optional object, <code>or</code> method doesn&rsquo;t unwrap &amp; return the <code>Optional&lt;Type&gt;</code>, so that we can perform further Optional related actions on it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">();</span>
Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> anotherOptional <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">or</span><span style="color:#f92672">(()</span> <span style="color:#f92672">-&gt;</span> <span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>anotherOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(),</span> <span style="color:#e6db74">&#34;anonymous&#34;</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<blockquote>
<p>If Optional not empty, do this&hellip; else, do that</p>
</blockquote>
<p>This is a common scenerio of Optional. To cover this flow into lamda, <strong>Java 9</strong> introduced <code>ifPresentOrElse(...)</code> method. It takes <em>Consumer</em> which is invoked when optional in not empty, and <em>Runnable</em> as second param which&rsquo;s <code>run</code> method is invoked when the optional is empty.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">ifPresentOrElse</span><span style="color:#f92672">(</span>name <span style="color:#f92672">-&gt;</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>name<span style="color:#f92672">),</span>
                               <span style="color:#f92672">()</span> <span style="color:#f92672">-&gt;</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;No name found!!!&#34;</span><span style="color:#f92672">));</span>
</code></pre></div></li>
</ul>
</li>
<li>
<h3 id="filtering--mapping">Filtering &amp; Mapping</h3>
<ul>
<li>
<p>To test and filter out value, we can use <code>Optional.filter(...)</code> method.
It takes <code>Predicate</code> as param and return Optional.
If Optional is not empty, the pedicate&rsquo;s test method is invoked.
If test method return true, filter method will return the <code>Optional&lt;value&gt;</code>, otherwise return <code>Optional.empty()</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">filter</span><span style="color:#f92672">(</span>name <span style="color:#f92672">-&gt;</span> name<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;John&#34;</span><span style="color:#f92672">));</span>
Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">isPresent</span><span style="color:#f92672">(),</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p>For non-empty Optional, <code>Optional.map(...)</code> method transform the value to another value.
It takes <code>Function</code> as param.
<code>Function</code>&rsquo;s <code>apply</code> method takes the optional&rsquo;s value and returned new object of the expected type.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">);</span>
Optional<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> lengthOptional <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>String<span style="color:#f92672">::</span>length<span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p><code>Optional.flatMap(...)</code> is same as <code>Optional.map(...)</code>.
The difference is <em>map</em>&rsquo;s <em>Function.apply</em> method takes unwrapped value; where <em>flatMap</em> takes Optional wrapped value, unwrap it first, then transfrom it.</p>
<p>Suppose we have the following,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Hero</span> <span style="color:#f92672">{</span>

  <span style="color:#66d9ef">private</span> String name<span style="color:#f92672">;</span>

  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Hero</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name<span style="color:#f92672">;</span>
  <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">public</span> Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getName</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span>name<span style="color:#f92672">);</span>
  <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Here, want A hero&rsquo;s name&rsquo;s <em>length</em> as optional.
If we use <code>map</code> method here:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>Hero<span style="color:#f92672">&gt;</span> heroOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Hero<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">));</span>
Optional<span style="color:#f92672">&lt;</span>Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;&gt;</span> nameOptionalWrapper <span style="color:#f92672">=</span> heroOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>Hero<span style="color:#f92672">::</span>getName<span style="color:#f92672">);</span>
Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> nameOptionalWrapper<span style="color:#f92672">.</span><span style="color:#a6e22e">orElse</span><span style="color:#f92672">(</span>Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">empty</span><span style="color:#f92672">());</span>
Optional<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> nameLengthOptional <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>String<span style="color:#f92672">::</span>length<span style="color:#f92672">);</span>
</code></pre></div><p>In this case, if we use <code>flatMap</code> instead:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Optional<span style="color:#f92672">&lt;</span>Hero<span style="color:#f92672">&gt;</span> heroOptional <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Hero<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">));</span>
Optional<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameOptional <span style="color:#f92672">=</span> heroOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">flatMap</span><span style="color:#f92672">(</span>Hero<span style="color:#f92672">::</span>getName<span style="color:#f92672">);</span>
Optional<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> nameLengthOptional <span style="color:#f92672">=</span> nameOptional<span style="color:#f92672">.</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>String<span style="color:#f92672">::</span>length<span style="color:#f92672">);</span>
</code></pre></div></li>
<li>
<p><strong>Java 9</strong> introduced <code>Optional.stream()</code> method.
It treats optional instance as a <code>Stream</code>.
So we can use various <code>Stream API</code> functionality for optional, such as <em>collect</em>, <em>map</em>, <em>filter</em>, <em>flatMap</em> etc.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameList <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Altair&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>Collectors<span style="color:#f92672">.</span><span style="color:#a6e22e">toList</span><span style="color:#f92672">());</span>
</code></pre></div></li>
</ul>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Optional is one of the powerful tools of Java&rsquo;s arsenal.
We can construct complex logic by chaining various optionals functionalities together as it empathizes Stream API flow.
But, we need to be careful with using optional.
Using optional in unnecessary places can create some boiler-plate code.
Again optional is not meant to used as method param, because <em>Optional Wrapper</em> can be null just like any other java object.
So stick it in your mind,</p>
<p><strong>Use Optional as method return type, Never use Optional as method&rsquo;s param type.</strong></p>
]]></content>
        </item>
        
    </channel>
</rss>
